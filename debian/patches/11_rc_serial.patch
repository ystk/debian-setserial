From: Jonas Genannt <jonas.genannt@capi2name.de>
Subject: setserial rc.serial patch


Index: setserial/rc.serial
===================================================================
--- setserial.orig/rc.serial	2006-06-20 10:02:58.000000000 +0200
+++ setserial/rc.serial	2006-06-20 10:30:35.000000000 +0200
@@ -1,134 +1,192 @@
-#
+#! /bin/sh
 # /etc/rc.serial 
 #	Initializes the serial ports on your system
-#
+### BEGIN INIT INFO
+# Provides:		setserial
+# Required-Start:	$remote_fs
+# Required-Stop:	$remote_fs
+# Default-Start:	S
+# Default-Stop:		0 1 6
+# Short-Description:	controls configuration of serial ports
+# Description:		Set and/or report the configuration information
+#			associated with a serial port. This information
+#			includes what I/O port and which IRQ a particular
+#			serial port is using.
+### END INIT INFO
 # chkconfig: 2345 50 75
 # description: This initializes the settings of the serial port
 #
-# FILE_VERSION: 19981128
-#
-# Distributed with setserial and the serial driver.  We need to use the
-# FILE_VERSION field to assure that we don't overwrite a newer rc.serial 
-# file with a newer one.
+# Distributed with setserial version 2.15
 # 
-# XXXX For now, the autosave feature doesn't work if you are
+# XXXX note: as of 2.15, the autosave feature doesn't work if you are
 # using the multiport feature; it doesn't save the multiport configuration
 # (for now).  Autosave also doesn't work for the hayes devices.  
-# Will fix later...
+#Will fix later...
 #
 #
+# Note that this has been changed so that if /etc/serial.conf exists,
+# this script does not configure the ports. It uses
+# /var/lib/setserial/autoserial.conf # instead, which is handled by another
+# init.d script. However, the script is still used for module loads and
+# unloads, even if serial.conf exists.
+#
 
-RCLOCKFILE=/var/lock/subsys/serial
-DIRS="/lib/modules/`uname -r`/misc /lib/modules /usr/lib/modules ."
-PATH=/bin:/sbin:/usr/bin
-DRIVER=serial
-DRIVER_NAME=serial
-MODULE_REGEXP="serial\b"
-
-ALLDEVS="/dev/ttyS?"
-if /bin/ls /dev/ttyS?? >& /dev/null ; then
-	ALLDEVS="$ALLDEVS /dev/ttyS??"
-fi
+SETSERIAL=/bin/setserial
+modconf=/var/run/setserial.conf
+autoconfig=/var/lib/setserial/autoserial.conf
+etcconfig=/etc/serial.conf
 
-SETSERIAL=""
-if test -x /bin/setserial ; then
-	SETSERIAL=/bin/setserial
-elif test -x /sbin/setserial ; then
-	SETSERIAL=/sbin/setserial
-fi
+# If the serial executable has been removed abort the configuration
+[ -x ${SETSERIAL} ] || exit 0
 
 #
-# See if the serial driver is loaded
+# make sure that a serial device is loaded...
+# insmod -k serial 2>/dev/null
 #
-LOADED=""
-if test -f /proc/devices; then
-	if grep -q " ttyS$" /proc/devices ; then
-		LOADED="yes"
-	else
-		LOADED="no"
-	fi
-fi
 
 #
-# Find the serial driver
+# Support devfs when it arrives.
 #
-for i in $DIRS
-do
-	if test -z "$MODULE" -a -f $i/$DRIVER.o ; then
-		MODULE=$i/$DRIVER.o
+if /bin/ls /dev/tts 2> /dev/null 1>&2 ; then
+	ALLDEVS="/dev/tts/*"
+else
+	# No devfs - old naming scheme
+	ALLDEVS="/dev/ttyS?"
+	if /bin/ls /dev/ttyS?? 2> /dev/null 1>&2 ; then
+		ALLDEVS="$ALLDEVS /dev/ttyS??"
 	fi
-done
-
-if ! test -f /proc/modules ; then
-	MODULE=""
 fi
 
 #
 # Handle System V init conventions...
 #
 case $1 in
-start)
+start | restart | force-reload )
 	action="start";
+	[ -f ${etcconfig} ] && exit 0
 	;;
 stop)
 	action="stop";
+	[ -f ${etcconfig} ] && exit 0
+	;;
+status)
+	action="status";
+	;;
+modload)
+	action="modload";
+	;;
+modsave)
+	action="modsave";
 	;;
 *)
 	action="start";
+	[ -f ${etcconfig} ] && exit 0
 esac
 
+if test $action  = modload ; then
+  echo "Restoring persistent state of serial.o module due to module reload... "
+  if test -f ${modconf} ; then
+        while read device args
+        do
+               case "$device" in
+                   ""|\#*)
+                       continue
+                       ;;
+               esac
+           ${SETSERIAL} -z $device $args
+        done < ${modconf}
+  else
+    echo "Warning - no module state found (ok if this is at bootup)"
+    echo "Using the bootup configuration instead."
+    action="start";
+  fi
+  exit 0
+fi
+
 if test $action  = stop ; then
-	if test -n ${SETSERIAL} -a "$LOADED" != "no" -a \
-           `head -1 /etc/serial.conf`X = "###AUTOSAVE###X" ; then
-		echo -n "Saving state of serial devices... "
-		grep "^#" /etc/serial.conf > /etc/.serial.conf.new
-		${SETSERIAL} -G -g ${ALLDEVS} >> /etc/.serial.conf.new
-		mv /etc/serial.conf /etc/.serial.conf.old
-		mv /etc/.serial.conf.new /etc/serial.conf
-		echo "done."
+	if [ -e ${etcconfig} ]; then
+		#nothing to do
+		dummy=0;
+	elif test "`sed 1q $autoconfig`X" = "###AUTOSAVE###X" ; then
+		echo -n "Saving state of known serial devices... "
+		grep "^#" $autoconfig > ${autoconfig}.new
+		${SETSERIAL} -G -g ${ALLDEVS} | grep -v "uart unknown\|pcmcia" >> ${autoconfig}.new
+		echo -n "backing up $autoconfig"
+		mv $autoconfig ${autoconfig}.old
+		mv ${autoconfig}.new $autoconfig
+		echo " done."
+	elif test "`sed 1q $autoconfig`X" = "###AUTOSAVE-FULL###X" ; then
+		echo -n "Saving state (including unknowns) of serial devices... "
+		grep "^#" $autoconfig > ${autoconfig}.new
+		${SETSERIAL} -G -g ${ALLDEVS} | grep -v "pcmcia" >> ${autoconfig}.new
+		echo -n "backing up $autoconfig"
+		mv $autoconfig ${autoconfig}.old
+		mv ${autoconfig}.new $autoconfig
+		echo " done."
+	elif test "`sed 1q $autoconfig`X" = "###AUTOSAVE-ONCE###X" ; then
+		echo -n "Saving state of known serial devices... "
+		echo "###PORT STATE GENERATED USING AUTOSAVE-ONCE###" > ${autoconfig}.new
+		grep "^#" $autoconfig >> ${autoconfig}.new
+		${SETSERIAL} -G -g ${ALLDEVS} | grep -v "uart unknown\|pcmcia" >> ${autoconfig}.new
+		echo -n "backing up $autoconfig"
+		mv $autoconfig ${autoconfig}.old
+		mv ${autoconfig}.new $autoconfig
+		echo " done."
 	fi
-	if test -n $MODULE ; then
-		module=`grep $MODULE_REGEXP /proc/modules | awk '{print $1}'`
-		if test -z "$module" ; then 
-			echo "The $DRIVER_NAME driver is not loaded."
-			rm -f ${RCLOCKFILE}
-			exit 0
-		fi
-		if rmmod $module ; then :; else 
-			echo "The $DRIVER_NAME driver could NOT be unloaded."
-			exit 1;
-		fi
-		echo "The $DRIVER_NAME driver has been unloaded."
-	fi
-	rm -f ${RCLOCKFILE}
 	exit 0
 fi
 
 #
-# If not stop, it must be a start....
+# Is it Start
 #
 
-if test -n $MODULE -a "$LOADED" != "yes" ; then 
-	if insmod -fm $MODULE $DRIVER_ARG \
-		> /tmp/$DRIVER.map 2> /tmp/$DRIVER.$$; then :; 
-	else
-		echo "Couldn't load $DRIVER_NAME driver."
-		echo "See error logs in /tmp/$DRIVER.$$"
-		exit 1
-	fi
-	/bin/rm -f /tmp/$DRIVER.$$
-fi
-
-if test -f /etc/serial.conf ; then
-        if test -n ${SETSERIAL} ; then
-		grep -v ^# < /etc/serial.conf | while read device args
-		do
-		    ${SETSERIAL} -z $device $args
-		done 
-	fi
-else
-	echo "###AUTOSAVE###" > /etc/serial.conf
+if test $action  = start ; then
+  outmsg=""
+  echo "Loading the saved-state of the serial devices... "
+  rm -f ${modconf}
+
+  if test -f $etcconfig ; then
+    readfrom=$etcconfig;
+  else
+    readfrom=$autoconfig;
+  fi
+  if test -f $readfrom ; then
+        while read device args
+        do
+               case "$device" in
+                  "#KERNEL")
+                       outmsg="... handled by kernel"
+                       continue
+                       ;;
+                   ""|\#*)
+                       continue
+                       ;;
+               esac
+           outmsg=""
+           ${SETSERIAL} -z $device $args
+           ${SETSERIAL} -bg $device
+        done < $readfrom
+        if test ! "$outmsg" = "" ; then
+          echo $outmsg
+        fi
+
+  else
+	echo "###AUTOSAVE###" > $autoconfig
+  fi
+fi
+
+if test $action  = modsave ; then
+	echo -n "Saving serial.o state to emulate module data persistence... "
+	rm -f ${modconf}
+	${SETSERIAL} -G -g ${ALLDEVS} | grep -v "uart unknown\|pcmcia" > ${modconf}
+	echo "done."
+	exit 0
+fi
+
+if test $action  = status ; then
+	echo "Status of serial devices: ${ALLDEVS}"
+       for d in ${ALLDEVS}; do
+	  ${SETSERIAL} -a ${d}
+       done
+	exit 0
 fi
-
-touch ${RCLOCKFILE}
-${SETSERIAL} -bg ${ALLDEVS}
